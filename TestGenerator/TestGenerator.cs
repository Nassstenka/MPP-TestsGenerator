using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;

namespace TestGenerator
{
    public static class TestGenerator
    {
        public static TestElement[] GenerateTests(string fileContent)
        {
            List<TestElement> tests = new List<TestElement>();

            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(fileContent);
            CompilationUnitSyntax root = syntaxTree.GetCompilationUnitRoot();
            var usings = root.Usings;
            var namespaces = root.DescendantNodes().Where(elem => elem is NamespaceDeclarationSyntax);

            foreach (NamespaceDeclarationSyntax @namespace in namespaces)
            {
                var classes = @namespace.DescendantNodes().Where(elem => elem is ClassDeclarationSyntax);
                foreach (ClassDeclarationSyntax @class in classes)
                {
                    tests.Add(new TestElement(@class.Identifier.Text + "Test", CreateTest(usings, @class)));
                }
            }

            return tests.ToArray();
        }

        public static string CreateTest(IEnumerable<UsingDirectiveSyntax> usings, ClassDeclarationSyntax @class)
        {
            var syntaxFactory = SyntaxFactory.CompilationUnit();
            usings = usings.Append(CreateUsing("NUnit.Framework"));
            usings = usings.Append(CreateUsing(GetClassFullName(@class)));
            syntaxFactory = syntaxFactory.AddUsings(usings.ToArray());

            NamespaceDeclarationSyntax testNamespace = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(usings.Last().Name + ".Tests"));
            ClassDeclarationSyntax testClass = SyntaxFactory.ClassDeclaration(@class.Identifier.Text + "Test").AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));
            testClass = testClass.AddMembers(CreateMethods(@class))
                                 .AddAttributeLists(SyntaxFactory.AttributeList().AddAttributes(SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("TestFixture"))));
            testNamespace = testNamespace.AddMembers(testClass);

            syntaxFactory = syntaxFactory.AddMembers(testNamespace);
            return syntaxFactory.NormalizeWhitespace().ToFullString();
        }

        public static string GetClassFullName(ClassDeclarationSyntax @class)
        {
            string fullName = "";
            while (!(@class.Parent is NamespaceDeclarationSyntax))
            {
                fullName = fullName + "." + ((ClassDeclarationSyntax)@class.Parent).Identifier.Text;
                @class = (ClassDeclarationSyntax)@class.Parent;
            }
            fullName = ((IdentifierNameSyntax)((NamespaceDeclarationSyntax)@class.Parent).Name).Identifier.Text + fullName;

            return fullName;
        }

        public static UsingDirectiveSyntax CreateUsing(string usingName)
        {
            NameSyntax fullName = null;
            string[] nameParts = usingName.Split('.');
            foreach (var name in nameParts)
            {
                var newName = SyntaxFactory.IdentifierName(name);
                if ((fullName) != null)
                {
                    fullName = SyntaxFactory.QualifiedName(fullName, newName);
                }
                else
                {
                    fullName = newName;
                }
            }

            return SyntaxFactory.UsingDirective(fullName);
        }

        public static MethodDeclarationSyntax[] CreateMethods(ClassDeclarationSyntax @class)
        {
            int count = 1;
            List<MethodDeclarationSyntax> methods = new List<MethodDeclarationSyntax>();
            var testBlock = SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");");
            foreach (var member in @class.Members)
            {
                if (member is MethodDeclarationSyntax && ((MethodDeclarationSyntax)member).Modifiers.Any(SyntaxKind.PublicKeyword))
                {
                    var methodDeclaration = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), "Test" + count.ToString())
                                    .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                                    .AddAttributeLists(SyntaxFactory.AttributeList().AddAttributes(SyntaxFactory.Attribute(SyntaxFactory.IdentifierName("Test"))))
                                    .WithBody(SyntaxFactory.Block(testBlock));

                    methods.Add(methodDeclaration);
                    count++;
                }
            }
            return methods.ToArray();
        }
    }
}
